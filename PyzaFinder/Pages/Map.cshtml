@page
@model PyzaFinder.Pages.MapModel
@{ Layout = "~/Views/Shared/_Layout.cshtml"; }
@section Styles {
    <link rel="stylesheet" href="~/css/Map.css" />
}
@functions{
    @using Npgsql;
    private static NpgsqlConnection GetConnection()
    {
        return new NpgsqlConnection(@"Server=localhost;Port=5432;User Id=postgres;Password=romaniec111;Database=pierogi");
    }
    private static string SelectSchedule(string day, int obcy)
    {
        using (NpgsqlConnection con = GetConnection())//nawiązanie połączenia z bazą
        {
            string val = "brak";
            string query = $"select {day} from public.schedule where id_restaurant={obcy}";
            con.Open();
            // Define a query returning a single row result set
            NpgsqlCommand command = new NpgsqlCommand(query, con);
            // Execute the query and obtain the value of the first column of the first row
            if (command.ExecuteScalar() != null)
            {
                string count = (string)command.ExecuteScalar();
                val = count;
            }
            con.Close();
            return val;
        }
    }
    private static string SelectPath( int obcy)
    {
        using (NpgsqlConnection con = GetConnection())//nawiązanie połączenia z bazą
        {
            string val = "brak";
            string query = $"select path from public.photo where id_restaurant={obcy} order by id_photo";
            con.Open();
            // Define a query returning a single row result set
            NpgsqlCommand command = new NpgsqlCommand(query, con);
            // Execute the query and obtain the value of the first column of the first row
            if (command.ExecuteScalar() != null)
            {
                string count = (string)command.ExecuteScalar();
                val = count;
            }
            con.Close();
            return val;
        }
    }
    private static int SelectGrade(int obcy)
    {
        using (NpgsqlConnection con = GetConnection())//nawiązanie połączenia z bazą
        {
            int val = 0;
            string query = $"select grade from public.opinion where id_restaurant={obcy}";
            con.Open();
            // Define a query returning a single row result set
            NpgsqlCommand command = new NpgsqlCommand(query, con);
            // Execute the query and obtain the value of the first column of the first row
            int id2 = 0;
            var id = 0;
            var reader = command.ExecuteReader();
            int petla = 0;
            while (reader.Read())
            {
                id = id+Int32.Parse(reader["grade"].ToString());
                petla++;
            }
            //if (command.ExecuteScalar() != null)
            //{
            //    Int32 count = (Int32)command.ExecuteScalar();
            //    val = count;
            //}
            val = id;
            if(petla!=0)val = id / petla;
            con.Close();
            return val;
        }
    }
    //private static long CountRowsGrade(int obcy)
    //{
    //    using (NpgsqlConnection con = GetConnection())//nawiązanie połączenia z bazą
    //    {
    //        long val = 0;
    //        string query = $"select count(*) from public.opinion where id_restaurant={obcy}";
    //        con.Open();
    //        // Define a query returning a single row result set
    //        NpgsqlCommand command = new NpgsqlCommand(query, con);
    //        // Execute the query and obtain the value of the first column of the first row
    //        if (command.ExecuteScalar() != null)
    //        {
    //            Int64 count = (Int64)command.ExecuteScalar();
    //            val = count;
    //        }
    //        con.Close();
    //        return val;
    //    }
    //}
}
<div>
    <div id="search2">

        <!--<div style="background-color: white;
			width: 260px;
			height: 35px;
			display: block;
			margin-left: 20px;
			color: grey;
			text-align: left;
			font-size: 23px;
			margin-bottom: 10px;
			border-radius: 46px;
			box-shadow: 22px 12px 21px 0px rgba(0,0,0,0.15);">-->
            <p>
                <form action="@Url.Action("Map")" method="post">
                    <img src="~/img/search.png" style="width: 13px; height: 13px; margin-left: 9px;">
                    <input type="search" name="example" size="34px" value="Search" style="width:80%" />
                </form>
            </p>
        <!--</div>-->

        <h2 style="font-size:20px">LIST OF RESTAURANTS</h2>
        <ul id="restaurants">
            <div style="width: 100%; height: 500px; overflow-y: auto;">
                @foreach (var item in Model.DumplingRestaurants)
                 {
                    <li>
                        <div class="jeden">
                            <div class="napis">
                                Telefon: @Html.DisplayFor(m => item.PhoneNumber)<br>
                                Godziny otwarcia:
                                @{string day = DateTime.Now.DayOfWeek.ToString();
                                }
                                @SelectSchedule(day, item.IdRestaurant);
                                <br>
                                @Html.DisplayFor(m => item.Address)
                            </div>
                            @{string path = SelectPath(item.IdRestaurant);}
                            <a href="polecam.html"><img src="@Url.Content(path)" style="height: 98%; border-radius: 25px; padding-right: 2%; width: auto; float: right;"></a>
                        </div>
                        <div class="dwa">
                            <div class="gwiazdki">
                                @{
                                    int ocena = 0;
                                    ocena = SelectGrade(item.IdRestaurant);
                                    if (ocena == 0)
                                    {
                                        <p>brak ocen</p>
                                    }
                                    while (ocena > 0)
                                    {
                                        if (ocena > 1)
                                        {
                                            <img src="~/img/star.png" style="height: auto; width: 18%; float: left;">
                                            ocena -= 2;
                                        }
                                        if (ocena <= 1 && ocena > 0)
                                        {
                                            <img src="~/img/starL.png" style="height: auto; width: 18%; float: left;">
                                            ocena--;
                                        }
                                    }
                                }
                            </div>
                            <div class="opinie">
                                <a href="polecam.html">Wyświetl opinie</a>
                            </div>
                            <div class="odleglosc">
                                Odległość: 5m
                            </div>
                        </div>
                    </li>
                 }
            </div>
        </ul>
    </div>
    <div id="pyza">
        <img src="~/img/pyzunia.png">
    </div>
</div>
